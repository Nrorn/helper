копирование репо аптли с одного диска на другой 
sudo rsync -aAHv /REPO/ /NEW_REPO

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Всё что надо это
1. распокавать все в указанную папку 
dpkg-deb -R nt-pipe_1.6.8-b15_focal_amd64.deb /home/e.sermyagin/nt-pipe/2/nt-pipe_1.6.8-b11_focal_amd64
2. поменять файл ntpipe-broker.conf
    так же изменить версию пакета в ~/nt-pipe/2/nt-pipe_1.6.8-b11_focal_amd64/DEBIAN/control 
3.dpkg-deb --build <directory>
directory - положить всё в директорию с названием <name>=nt-pipe_1.6.8-b11_focal_amd64


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
в таких файлах можно посмотреть пример лога при феле добавления в aptly
REPO/aptly/jenkins/workspace/ntproto@tmp/durable-c9717e09/jenkins-log.txt


если такая ошибка при добаление пакета
ERROR: unable to publish: unable to process packages: error linking file to /REPO/aptly/ntrepo/public/ubuntu/20.04/pool/main/n/ntproto4/ntproto4_4.3.3-build2_ubuntu2004_amd64.deb: file already exists and is different
!!!
выполнем удаление по данному пути пакета ntproto4_4.3.3-build2_ubuntu2004_amd64.deb
/REPO/aptly/ntrepo/public/ubuntu/<версия ос>/pool/main/n/ntproto4/
далее удаляем из аптли 
 aptly -config=./etc/aptly-ntrepo.conf repo remove ubuntu-<версия ос>-devel "ntproto4 (=4.3.3-build2)"
и из 
/REPO/release/ntproto/<версия ос>/devel/ntproto4_4.3.3-build2_ubuntu2004_amd64.tar.gz
возможно еще из олд
/REPO/release/ntproto/<версия ос>/devel/old/ntproto4_4.3.3-build2_ubuntu2004_amd64.tar.gz
дале выполняем команду отчистки бд аптли 
 aptly -config=./etc/aptly-ntrepo.conf  db cleanup
 

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
для просмотра команд аптли с нестондартным конфигом 
sudo aptly -config=./etc/aptly-ntrepo.conf repo remove ubuntu-18.04-devel  "ntmetrics2 (=2.11.3-b17)"



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
при использование скрипта mirror  перед скриптом выставляю DRYRUN=1  он покажет какие команды будут использованны
DRYRUN=1 ./mirror-ubuntu.sh  create-ntupdate
Укажите ОС: ubuntu2204    ubuntu2004    ubuntu1804
./mirror-ubuntu.sh: line 130: OSNAME: bad array subscript
aptly -config=./etc/aptly-mirror.conf repo create -architectures=x86 -distribution= -x86-ntupdate
./mirror-ubuntu.sh: line 130: OSNAME: bad array subscript
aptly -config=./etc/aptly-mirror.conf repo create -architectures=arm -distribution= -arm-ntupdate



публикация смерженого снапшота в новый репо 

добовляем глобалную переменную GNUPGHOME с путем до ключа 
~/ntrepo/aptly$ export GNUPGHOME=./keys/gnupg


aptly -config=./etc/aptly-mirror.conf publish list | grep 2004

меняем снсмерженый снапшот для архитектуры amd64   * ./focal (origin: Ubuntu) [amd64] publishes {main:.........

~/ntrepo/aptly$ aptly -config=./etc/aptly-mirror.conf publish switch -gpg-key="35C973B37899FF01E608C2A23033181FBDDAED3C" -architectures=amd64 -component="main" focal ubuntu2004-x86-2024-02-08-1755


публикуем снапшот архитектура arm
aptly -config=./etc/aptly-mirror.conf publish snapshot -gpg-key="35C973B37899FF01E608C2A23033181FBDDAED3C" -architectures=arm64,armhf -distribution=focal  ubuntu2004-arm-2024-02-08-1755 arm

создание зеркала для докера
aptly -config=./etc/aptly-mirror.conf mirror create -keyring=~/ntrepo/aptly/keys/docker.gpg   docker-2004-stable https://download.docker.com/linux/ubuntu focal stable

про добалвнеие есть в конце файла info_docker.txt
docker.gpg 

докер мирор обнавление
aptly -config=./etc/aptly-mirror.conf mirror update -keyring=~/ntrepo/aptly/keys/docker.gpg docker-2004-stable


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Основное отличие между "aptly repo create" и "aptly repo add" заключается в том, что первая команда создает новый репозиторий, а вторая добавляет пакеты в уже существующий репозиторий.

Команда              используется для создания нового репозитория в Aptly. При использовании этой команды вы указываете имя нового репозитория и его описание. После создания репозитория вы можете добавлять в него пакеты с помощью команды "aptly repo add".
"aptly repo create" 

Команда             используется для добавления пакетов в существующий репозиторий в Aptly. При использовании этой команды вы указываете имя репозитория, в который нужно добавить пакеты, и путь к файлам пакетов. Пакеты могут быть добавлены как из локальной файловой системы, так и из удаленных репозиториев.
 "aptly repo add" 

	Для просмотра всех существующих баз в aptly можно использовать команду. Она выведет список всех созданных репозиториев (баз) в aptly. 
aptly repo list

	Для просмотра списка пакетов в репозитории aptly можно использовать команду. Она выведет информацию о репозитории, включая список всех пакетов, которые находятся в этом репозитории.
aptly repo show <имя репозитория>

	Показывает какие пакеты есть в конкретном локальном репо 
aptly repo show -with-packages 18.04-stable

	Если вы хотите получить более подробную информацию о конкретном пакете, вы можете использовать команду. Она выведет информацию о пакете, включая его имя, версию, описание, зависимости и т.д.
aptly package show -with-references nt-pipe_1.6.8-b15_amd64

-with-files: отобразить список файлов пакетов в пуле пакетов
-with-references: показать список зеркал, снимков и локальных репозиториев, которые ссылаются на этот пакет

	Для поиска пакетов во всех репозиториях aptly. Она выведет список всех пакетов, которые содержат указанное имя в своем имени или описании.
aptly search <имя пакета> 

Например, чтобы найти пакет с именем "nginx" во всех репозиториях aptly, нужно выполнить следующую команду:
aptly search nginx

Эта команда выведет список всех пакетов, которые содержат слово "nginx" в своем имени или описании, во всех репозиториях aptly. Если вы знаете, что искомый пакет находится только в определенном репозитории, вы можете указать его имя в команде aptly search. Например:
aptly package search -repo=18.04-custom-dev nanoswitch

просмотр зеркал 
 aptly mirror list

показывает снапшоты
 aptly snapshot list
 
 показывает какие пакеты есть в снашотах
aptly snapshot show -with-packages  18.04-stable-dev-2023-07-01 | grep nt-pipe


aptly snapshot show -with-packages  18.04-stable-dev-2023-11-14 | grep nt-io | grep 2.1.8-b1
  nt-io-core-avx-i_2.1.8-b1_amd64
  nt-io-core-avx-i-dbgsym_2.1.8-b1_amd64
  nt-io-corei7_2.1.8-b1_amd64
  nt-io-corei7-dbgsym_2.1.8-b1_amd64

список опубликованых репо
aptly publish list 

удаляет все пакеты ntdevel2 из локального репо 18.04-stable
aptly repo remove 18.04-stable ntdevel2



aptly package show <package-query>

Параметры следующие:
package-query - это запрос пакета для поиска пакетов (чаще всего в формате ссылки на пакет, например, bwbar_1.2.3-2_amd64)
Флаги:
-with-files: отображение списка файлов пакета в пуле пакетов
-with-references: отображение списка зеркал, моментальных снимков и локальных репозиториев, которые ссылаются на этот пакет.


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
что делаем для замены пакета в какой то одной версии репо

I.
добавил в эти локал репо пакет nt-pipe_1.6.8-b15
aptly repo add 20.04-stable-dev /home/e.sermyagin/pakets/ntio/*_focal*
aptly repo add 18.04-stable-dev /home/e.sermyagin/dpdk-20-corei7_20.11~-b15_18.04_amd64.deb
aptly repo add 18.04-stable-dev /nt-repo/nt-repo-dev/pool/stable/d/dpdk-20-4.15.0-76-generic-modules/dpdk-20-4.15.0-76-generic-modules_20.11.1-b15_18.04_amd64.deb

II.
создал снапшот локал репо для стейбл версии 18 И 20 UBUNTU
aptly snapshot create 18.04-stable-dev-2023-07-17 from repo 18.04-stable-dev
aptly snapshot create 20.04-stable-dev-2023-07-17 from repo 20.04-stable-dev

 20.04-stable-dev-2023-11-02 
 18.04-stable-dev-2023-11-02 

18.04-stable-dev-2024-05-15.p4

III.
делаю пул 
1
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p0 nt-pipe_1.6.8-b15_amd64
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 20.04-stable-dev-2023-07-01 20.04-stable-dev-2023-07-13 20.04-stable-dev-2023-07-01.p0 nt-pipe_1.6.8-b15_amd64
2
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01.p0 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p1 dpdk-20-core-avx-i_20.11.1-b15_amd64
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 20.04-stable-dev-2023-07-01.p0 20.04-stable-dev-2023-07-13 20.04-stable-dev-2023-07-01.p1 dpdk-20-core-avx-i_20.11.1-b15_amd64

3
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01.p1 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p2 dpdk-20-4.15.0-76-generic-modules_20.11.1-b15_amd64

III.I
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01.p5 | grep nt-io-core-avx-i
aptly snapshot show -with-packages 20.04-stable-dev-2023-07-01.p1 | grep nt-pipe
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01.p0 | grep dpdk-20-core-avx-i
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01 | grep dpdk-20-4.15.0-76

III.II
показывает разницу в снапшотах
aptly snapshot diff 18.04-stable-dev-2023-07-01 18.04-stable-dev-2023-07-01.p5
  Arch   | Package                                  | Version in A                             | Version in B
+ amd64  | dpdk-20-4.15.0-76-generic-modules        | -                                        | 20.11.1-b15                             
+ amd64  | dpdk-20-core-avx-i                       | -                                        | 20.11.1-b15                             
+ amd64  | dpdk-20-corei7                           | -                                        | 20.11.1-b15                             
+ amd64  | nt-io-core-avx-i                         | -                                        | 2.1.5-b16                               
+ amd64  | nt-io-corei7                             | -                                        | 2.1.5-b16                               
+ amd64  | nt-pipe                                  | -                                        | 1.6.8-b15   

IV.
снапшот 18.04-stable-dev-2023-07-01 для 18

aptly publish switch -architectures=amd64,arm64,armhf -component="stable" bionic nt-repo 18.04-stable-dev-2023-07-01.p3

потом заменил используемый снапшот 20.04-stable-dev-2023-07-01 для 20
aptly publish switch -architectures=amd64,arm64,armhf -component="stable" focal nt-repo 20.04-stable-dev-2023-07-01.p1


aptly publish switch -architectures=amd64,arm64,armhf -component="stable" bionic nt-repo-stable 18.04-stable-dev-2023-07-01
aptly publish switch -architectures=amd64,arm64,armhf -component="stable" focal nt-repo 20.04-stable-dev-2023-07-01


после этого удалось поставить пакет nt-pipe=1.6.8-b15




исключение пакета из snapshot 
aptly snapshot filter

aptly snapshot filter 18.04-testing-dev-2023-06-01 18.04-testing-dev-2023-06-01-b1 '!Name (gtp-balancer0_2.14.0-1670945147-755f9986-testing_amd64)'









=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

как добавить пакет 
aptly repo remove 18.04-stable-dev "nt-pipe (=1.6.8-b15)"
aptly publish --force-overwrite update bionic nt-repo-dev
aptly repo add 18.04-stable-dev /home/apshen/nt-pipe_1.6.8-b15_bionic_amd64.deb
aptly publish --force-overwrite update bionic nt-repo-dev
aptly publish --force-overwrite update focal nt-repo-dev

как удалить пакет из базы 18.04-cus-dev
aptly repo list
List of local repos:
 * [18.04-cus-dev] (packages: 26)
 
Для удаления пакета из репозитория aptly можно использовать команду aptly repo remove <имя репозитория> <имя пакета>. В вашем случае, чтобы удалить пакет из репозитория 18.04-cus-dev, нужно выполнить следующую команду:

aptly repo remove 18.04-cus-dev <имя пакета>

Замените <имя пакета> на имя пакета, который вы хотите удалить из репозитория. После выполнения этой команды пакет будет удален из репозитория 18.04-cus-dev. 

Обратите внимание, что удаление пакета из репозитория не удаляет сам пакет из файловой системы. Если вы хотите удалить пакет полностью, вам нужно будет удалить его файлы вручную.


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
aptly publish update 18.04-custom-dev
RROR: unable to update: published repo with storage:prefix/distribution ./18.04-custom-dev not found

Ошибка указывает на то, что опубликованный репозиторий с именем 18.04-custom-dev не найден в Aptly. Вы можете проверить список опубликованных репозиториев в Aptly, используя следующую команду:

aptly publish list


Если репозиторий не указан в списке, это означает, что он еще не был опубликован. Вы можете опубликовать репозиторий в Aptly, используя следующую команду:

aptly publish repo <repository-name> <distribution> <component>


Замените <repository-name> на имя репозитория, который вы хотите опубликовать, <distribution> на имя дистрибутива (например, bionic) и <component> на имя компонента (например, main). После того, как репозиторий будет опубликован, вы можете обновить его, используя команду aptly publish update.

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Чтобы выполнить aptly publish update для репозитория repo-dev/bionic, вы можете использовать следующую команду:

aptly publish update bionic repo-dev

что бы выполнить обнавление для репозитория nt-repo-dev/bionic

  * nt-repo-dev/bionic (origin: NT, label: NT Ubuntu repository) [amd64, arm64, armhf] publishes {custom: [18.04-custom-dev]}, {stable: [18.04-stable-dev]}, {testing: [18.04-testing-dev]}, {unstable: [18.04-unstable-dev]}

 aptly publish update bionic nt-repo-dev




В Aptly регулярные выражения используются для поиска пакетов в репозиториях. Вы можете использовать регулярные выражения для более точного поиска пакетов по имени, версии, описанию и другим параметрам.

Для использования регулярных выражений в Aptly вы можете использовать специальные символы, такие как ^ для обозначения начала строки, $ для обозначения конца строки, . для обозначения любого символа и * для обозначения любого количества символов.

Например, чтобы найти все пакеты, начинающиеся с "nginx", вы можете использовать следующее регулярное выражение:

^nginx


А чтобы найти все пакеты, заканчивающиеся на "dev", вы можете использовать следующее регулярное выражение:

dev$


Кроме того, вы можете использовать другие операторы и символы для более сложных выражений. Например, | используется для обозначения "или", [ ] используется для обозначения диапазона символов, а { } используется для обозначения количества повторений.

Например, чтобы найти все пакеты, содержащие слово "nginx" или "apache" в имени или описании, вы можете использовать следующее регулярное выражение:

(nginx|apache)


Или чтобы найти все пакеты, содержащие цифры в версии, вы можете использовать следующее регулярное выражение:

[0-9]+

Это найдет все пакеты, содержащие одну или более цифр в версии.


