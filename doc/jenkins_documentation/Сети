модель TCP/IP УРОВНИ и связанные с ними протаколы , а так же linux утилиты

транспорт 
инкапсуляция											                			 декапсуляция
|                                                                                                  	                  		    /\   
\/                                          						     		         		    |
	_4____ port _________________________________________________|_|_DA(port)_|_SA(port)|____КУСОК КОТИКА____|____________ дейтограмма
                                               |                     |                      |                     |
	_3____ ip ____________________________|__|_DA(ip)_|_SA(ip)___|______________________|____КУСОК КОТИКА__ _|_______________ пакет
	                                      |                      |                      |                    |               
	                                      |                      |                      |                    |     
	_2____ mac _____p_|_DA(mas)_|_SA(mac)_|_____PAYLOAD__________|______________________|____КУСОК КОТКА_____|_FCS(crc-32)_|_____ кадр

			
	_1___ сигнал 0-1_________________________________________________________________________________________ бит



(p)Preamble – последовательность бит, по сути, не являющаяся частью ETH заголовка определяющая начало Ethernet фрейма.

(DA) (Destination Address) –  адрес назначения, может быть юникастом, мультикастом, бродкастом.

(SA) (Source Address) –  адрес отправителя. Всегда юникаст.

Payload – L3 пакет размером от 46 до 1500 байт

FCS (Frame Check Sequences) – 4 байтное значение CRC используемое для выявления ошибок передачи. Вычисляется отправляющей стороной, и помещается в поле FCS. Принимающая сторона вычисляет данное значение самостоятельно и сравнивает с полученным.





модель TCP/IP
УРОВНИ				Протаколы				linux утилиты
___________________.________________________________________________.__________________________
ПРИКЛАДНОЙ        4|	dhcp,http,smtp,pop3,dns,ftp,sftp		| curl, wget,ssh
<<<<<<< HEAD
ТРАНСПОРТНЫЙ	  3|	tcp,udp,sctp,tls,ssl		 		| ssh
СЕТЕВОЙ		  2|	IPv4,IPv6,ICMP,NAT,TTL                  	| ping, traceroute
КАНАЛЬНЫЙ	  1|	MAC,Ethernet,Wi-fi		         	| arp
=======
ТРАНСПОРТНЫЙ	 3|	tcp,udp,sctp,tls,ssl			| ssh
СЕТЕВОЙ		 2|	IPv4,IPv6,ICMP,NAT,TTL                	| ping, traceroute
КАНАЛЬНЫЙ	 1|	MAC,Ethernet,Wi-fi			| arp
>>>>>>> 6407eedb5cb07131bb092500935e88cfa1ec922d


https://netacad.sadlab.su/itn-dl/3.3.4

модель OSI
УРОВНИ				Протаколы				linux утилиты
___________________.TCP________________________________________________.__________________________
ПРИКЛАДНОЙ 	 7|4|	
ПРЕДСТАВЛЕНИЯ	 6|4|
СЕАНСОВЫЙ	 5|4|
ТРАНСПОРТНЫЙ	 4|3|
СЕТЕВОЙ		 3|2|
КАНАЛЬНЫЙ	 2|1|
ФИЗИЧЕСКИЙ	 1|1|






ПРИКЛАДНОЙ
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Система доменных имен
	DNS - Преобразует имена доменов, например cisco.com, в IP-адреса.

Конфигурация хоста
	DHCPv4 - протокол динамической настройки узлов. Сервер DHCPv4 динамически назначает информацию адресации IPv4 клиентам DHCPv4 при запуске и позволяет повторно использовать адреса, когда они больше не нужны.


Электронная почта
	SMTP - простой протокол пересылки почты. SMTP ― упрощенный протокол передачи электронной почты, с помощью которого клиенты отправляют электронную почту на почтовый сервер, а серверы отправляют электронную почту на другие серверы.
	
	POP3 - Протокол почтового отделения (Post Office Protocol version 3, POP3) Позволяет клиентам получать электронную почту с почтового сервера и загружать ее в локальное почтовое приложение клиента.
	
	IMAP - протокол доступа к сообщениям в Интернете (IMAP) Позволяет клиентам получать доступ к электронным сообщениям, которые хранятся на почтовом сервере

	
Передача файлов
	FTP - Протокол передачи файлов Устанавливает правила, которые позволяют пользователю получать доступ к файлам на других узлах и обмениваться ими по сети FTP - надежный протокол доставки файлов с подтверждением и установлением соединения
	SFTP - SSH протокол передачи файлов. Протокол передачи файлов поверх SSH (SFTP) — SFTP является расширением протокола Secure Shell (SSH) и может использоваться для создания защищенного сеанса передачи файлов. SSH — это метод безопасного удаленного входа, который обычно используется для доступа к командной строке устройства.



Веб и Веб-Сервис
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=


https://habr.com/ru/articles/813395/
	HTTP — Hypertext Transfer Protocol (протокол передачи гипертекста) Задает правила обмена в Интернете текстом, графическими изображениями, звуковыми, видео и другими файлами мультимедиа по Интернету. Версия HTTP 1.1 используется сейчас. Так же существуют HTTP/2, HTTP/3 и HTTPS.   
	
https://habr.com/ru/articles/813395/
|    |          | 	          |
\протокол\Адрес сервера\ Сраница     \
	
URL состоит из трех основных частей:

   *Название протокола, в примере на рисунке протокол HTTP.

   *Адрес сервера, на котором размещен ресурс. Можно использовать IP-адрес или доменное имя. Адрес сервера отделяется от названия протокола двоеточием и двумя слешами. 

   *Адрес ресурса на сервере. Это может быть HTML-страница, изображение, видео или ресурс другого типа. В примере на рисунке адрес страницы: /courses/networks.

В URL не обязательно использовать только протокол HTTP, вот примеры с другими протоколами:

	https://ya.ru
	ftp://example.com

Также URL не обязательно должен указывать на страницы в HTML, можно использовать ресурсы в разных форматах, например:

	Текст – https://www.ietf.org/rfc/rfc959.txt
	Изображение – https://habr.com/img/maskable_icon.png	


Протокол HTTP работает в режиме запрос-ответ. Клиент, например, браузер, передает на сервер запрос к определенному ресурсу, например, Web-странице. Сервер в ответ отправляет клиенту этот ресурс или сообщение об ошибке, если ресурс передать нельзя. 


!!!Запрос HTTP состоит из трех основных частей:

   *Запрос
   *Заголовки (не обязательно)
   *Тело сообщения (не обязательно)

Пример простого запроса HTTP в текстовом режиме:

	GET /courses/networks HTTP/1.1
	Host: habr.com
	
В первой строке указывается сам запрос, который также состоит из трех частей:

   Метод HTTP GET указывает, какое действие требуется выполнить с ресурсом. В примере метод GET говорит о том, что мы хотим получить (загрузить) ресурс.
   Адрес ресурса /courses/networks – путь к странице на Web-сервере, которую мы хотим загрузить.
   Версия протокола HTTP/1.1.

Во второй строке указывается заголовок Host. Этот заголовок является обязательным в версии HTTP/1.1, в нем задается доменное имя сервера, к которому направлен запрос. Сейчас активно используется виртуальный хостинг: один Web-сервер на одном IP-адресе может обслуживать несколько сайтов с разными доменными именами. Чтобы понять, какому именно сайту предназначен запрос, нужно указать доменное имя сайта в заголовке Host.   

В HTTP используется следующий формат заголовка:
   Название заголовка: значение заголовка
   
Методы HTTP
 
Название метода | Описание метода
----------------------------------
GET             | Запрос на передачу ресурса 
HEAD            | Запрос на передачу ресурса, но сам русурс в ответе не передается, только заголовки
POST            | Передача данных на сервер для обработки указанного ресурса 
PUT             | Размещение ресурса на сервере (если токой ресурс уже есть на сервере то он замещается).
DELETE          | Удаление ресурса на сервере
CONNECT         | Установка соединение с сервером на основе ресурса 
OPTIONS         | Запрос поддерживаемых методов HTTP для ресурса и других параметров коммуникации
TRACE	        | Запрос на трасировку сообщения: сервер должнг включить в свой ответ исходный запрос, на который он отвечает. Это полезно, когда запрос проходит через промежуточные устройства, которые могут изменить запрос, например, добавить заголовки.


На практике в Web чаще всего используются два метода: GET для запроса Web-страниц и POST для передачи данных из браузера на сервер, например, после заполнения формы.


!!!Ответ HTTP, как и запрос, состоит из трех частей:

   *Статус ответа
   *Заголовки (не обязательно)
   *Тело сообщения (не обязательно)

Пример ответа на запрос выше:


HTTP/1.1 200 ОК
Content-Type: text/html; charset=UTF-8
Content-Length: 5161

Текст Web-страницы…   
  
  
В HTTP/1.1 ответ, также как и запрос, представляет собой обычные текстовые строки.

Первая строка ответа состоит из двух частей:

   *Версия протокола, в примере HTTP/1.1. Версию указывать не обязательно.
   *Код статуса ответа, в примере 200 ОК, запрос обработан успешно.

Ответ содержит два заголовка, которые следуют после строки с кодом статуса:

   *Content-Type, тип содержимого, которое передается в теле сообщения. Значение "text/html; charset=UTF-8" означает, что в теле сообщения страница HTML в кодировке UTF-8.
   *Content-Length, размер содержимого, в байтах. В примере размер страницы в теле сообщения 5161 байт.

После заголовков в теле ответа находится запрошенная Web-страница 


!!!Коды статусов ответов HTTP
Первая строка ответа HTTP содержит код статуса ответа – число в диапазоне от 100 до 599, которое характеризует результат выполнения запроса
  
Коды статусов ответов разделены на пять классов, которые определяются по первой цифре кода:

	1ХХ (информация): запрос получен, обработка продолжается.
	2ХХ (успешное выполнение): запрос был успешно принят и понят.
	3ХХ (перенаправление): для выполнения запроса необходимо предпринять дополнительные действия.
	4ХХ (ошибка клиента): запрос содержит синтаксическую ошибку или не может быть выполнен.
	5ХХ (ошибка сервера): запрос от клиента оформлен правильно, но при его обработке произошла ошибка на стороне сервера.

Часто встречающиеся коды статусов ответов приведены в таблице.  
  
Код статуса ответа | Описание
-------------------------------  
1xx (Информация) 
-------------------------------
101 Switching Protocols \  Запрос принят, сервер предлагает дальнейшее взаимодействие выполнять по другому протоколу (например, WebSocket)
-------------------------------  
2xx (успешное выполнение)  
-------------------------------
200 ОК     \ Запрос выполнен успешно 
-------------------------------
201 Created \ В результате выполнения запроса на сервере был успешно создан ресурс (напрмер, в ответ на запрос PUT)  
-------------------------------
3xx(перенаправление)
-------------------------------
301 Moved Permanently \ Запрошенный ресурс был перемещен. Новый URL русурса указывается в зашоловке ответа Location.В далее лучше использовать новый URL
302 Found             \ Запрошенный ресурс был временно перемещен в другое место. Новый URL ресурса указывается в заголовке ответа Location.  
304 Not Modified      \ Запрошенный ресурс не был изменен, поэтому можно взять ресурс из кэша, а не передавать его по сети.
-------------------------------
4ХХ (ошибка клиента)
-------------------------------
400 Bad Request \ Запрос не может быть обработан из-за ошибки синтаксиса
403 Forbidden   \ Доступ к запрошенному ресурсу запрещен
404 Not Found   \ Запрошенный ресурс не найден на сервере.
-------------------------------
5ХХ (ошибка сервера)
-------------------------------
500 Internal Server Error \ Запрос не может быть выполнен из-за внутренней ошибки в программном обеспечении сервера.
501 Not Implemented \ Сервер не поддерживает запрошенную функциональность, например, не может выполнить запрошенный метод HTTP для указанного ресурса
505 HTTP Version Not Supported \ Версия HTTP, указанная в запросе, не поддерживается.

Пример
telnet networkscourse.ru 80
Trying 185.199.111.153...
Connected to networkscourse.ru.
Escape character is '^]'.
GET / HTTP/1.1
Host: networkscourse.ru

HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 237
Server: GitHub.com
Content-Type: text/html; charset=utf-8
Last-Modified: Sat, 15 Oct 2022 17:47:01 GMT
Access-Control-Allow-Origin: *
ETag: "634af215-ed"
expires: Tue, 21 May 2024 06:35:09 GMT
Cache-Control: max-age=600
x-proxy-cache: MISS
X-GitHub-Request-Id: 3DA6:21750A:C7967D:CCE448:664C3E44
Accept-Ranges: bytes
Age: 0
Date: Tue, 21 May 2024 09:07:07 GMT
Via: 1.1 varnish
X-Served-By: cache-fra-eddf8230111-FRA
X-Cache: HIT
X-Cache-Hits: 0
X-Timer: S1716282427.187034,VS0,VE99
Vary: Accept-Encoding
X-Fastly-Request-ID: 364d5fe3c406e6feb937531539f501c4e2489b1e

<h1>Онлайн курс "Компьютерные сети"</h1>

Сайт для практических занятий по курсу <a href='https://www.asozykin.ru/courses/networks_online'>Компьютерные сети</a>.


Первая строка ответа содержит статус 200 ОК, запрос выполнен успешно. 
После статуса указываются заголовки. Сервер включил в ответ достаточно большое количество заголовков, наиболее важные из них:

   *Connection: keep-alive – не разрывать соединение TCP после получения ответа. Это полезно с точки зрения производительности, почему именно рассмотрим далее в курсе после изучения деталей работы протокола TCP.
   *Content-Length: 237 – длина ответа 237 байт, корневая страница сайта достаточно простая.
   *Server: GitHub.com – ответ прислал сервер GitHub.com, я использую бесплатный хостинг GitHub Pages.
   *Content-Type: text/html; charset=utf-8 – тело сообщения содержит HTML страницу в кодировке UTF-8.
   *Last-Modified: Sat, 15 Oct 2022 17:47:01 GMT – дата последнего изменения страницы.
   *Date: Fri, 10 May 2024 14:38:52 GMT – дата отправки ответа.
Заголовки ETag, expires и Cache-Control используются для управления кэшированием в HTTP. По кэшированию в HTTP в курсе есть отдельное видео.
  
  
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=	
	
	
	
	
	
	
	curl (работает по FTP, FTPS, HTTP, HTTPS, TFTP, SCP, SFTP, Telnet, DICT, LDAP, а также POP3, IMAP и SMTP) - Это набор библиотек, в которых реализуются базовые возможности работы с URL страницами и передачи файлов. Предназначена больше для анализа и имитации различных действий на сервере
https://losst.pro/kak-polzovatsya-curl
wget (работает по HTTP, HTTPS и FTP) - онсольная программа для загрузки файлов по сети.
https://losst.pro/komanda-wget-linux
Ключевое отличие между этими командами заключается в том, что cURL получает код HTML и выводит его в STDOUT (т. е. в консоль), в то время как Wget скачивает HTML -файлы и сохраняет их на диск.

	HTTPS - Защищенный HTTP (HTTPS) Безопасная форма HTTP, которая шифрует данные, которые обмениваются через Интернет.
	REST - Representational State Transfer. Веб-служба, использующая интерфейсы прикладного программирования (API) и HTTP-запросы для создания веб-приложений.




ТРАНСПОРТНЫЙ
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Протокол с установлением соединения

	TCP - Протокол управления передачей (TCP) обеспечивает устойчивое взаимодействие между процессами, работающими на разных хостах, и обеспечивает надежную передачу данных с подтверждением успешной доставки.

Без установления соединения
	UDP - Протокол пользовательских датаграмм (UDP) Позволяет процессу, запущенному на одном узле, отправлять пакеты процессу, запущенному на другом узле. Не подтверждает успешную доставку датаграммы	( знает только порты  )
	


Без установления соединения/Протокол с установлением соединения

	SCTP - это протокол с установлением или без установления соединения, что дает приложениям возможность выбирать тип соединения, который лучше всего соответствует их потребностям. 
	SCTP поддерживает многоадресную рассылку, что позволяет отправлять данные нескольким получателям одновременно.
	SCTP использует ассоциации, которые являются более гибкими, чем порты, и позволяют приложениям иметь несколько независимых потоков данных в одном соединении.

	



СЕТЕВОЙ
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Протокол Интернета (Internet Protocol, IР)


	IPv4 - Интернет-протокол версии 4 (IPv4) Получает сегменты сообщений из транспортного уровня, упаковывает сообщения в пакеты и направляет пакеты для сквозной доставки по сети. IPv4 использует 32-разрядный адрес.
	TTL - это поле в IP-заголовке, которое указывает, сколько "прыжков" может совершить пакет, прежде чем он будет отброшен. Это помогает предотвратить зацикливание пакетов в сети. Каждое устройство, через которое проходит пакет, уменьшает значение TTL на единицу. Когда TTL достигает нуля, пакет отбрасывается.

	IPv6 - Интернет-протокол версии 6 (IPv6) Подобен IPv4, но использует 128-битный адрес.
NAT - преобразование сетевых адресов. Преобразует IP-адреса частной сети в глобальные уникальные публичные IP-адреса


Обмен сообщениями

	ICMP - используется для диагностики проблем со связаностью в сети. Определят может ли достичь пакет адреса наначения в установленные врмеенные рамки

Одно из самых популярных применений ICMP это утилиты ping и traceroute.

traceroute- показывает полный маршрут между хостом, на котором выполняется трассировка до хоста назначения. Если на 6 шаге пакет обрабатывается дольше обычного, то говорят “на 6 хопе повышенная задержка". Базовый инструмент показывающий какой из сетевых узлов на маршруте пакет “сбоит". 
Звездочки (*) в команде traceroute при ее выполнении означают, что от данного хоста не получен ответ в течение заданного интервала времени.

Команда traceroute используется для отслеживания пути, по которому пакеты проходят от вашего компьютера до целевого хоста. Она отправляет пакеты с постепенно увеличивающимся значением поля TTL (Time to Live) и записывает IP-адреса и имена хостов промежуточных устройств, через которые проходят пакеты.
Если для какого-либо промежуточного устройства не получен ответ в течение заданного интервала времени, traceroute выводит звездочки (*) вместо IP-адреса или имени хоста. Это может быть вызвано следующими причинами:

• Промежуточное устройство недоступно или не отвечает.
• Маршрутизатор на промежуточном устройстве отбрасывает пакеты с истекшим временем жизни (TTL).
• Пакеты теряются или повреждаются во время передачи.

Звездочки служат индикатором того, что существует проблема с подключением к данному хосту или маршрутизатору. Вы можете попытаться выполнить команду traceroute еще несколько раз, чтобы проверить, сохраняется ли проблема. Если звездочки продолжают появляться, это может указывать на то, что существует сетевая проблема, которую необходимо устранить.


ping- Позволяет понять “"А жив ли хост?".Пинг поможет понять как долго пакет доходит до адреса назначения и, соответственно

Работает ping предельно просто:

1. Источник отправляет запрос вида ICMP echo request. Это выглядит как вопрос “бро, ты живой?"
2. Получатель отправляет ответ источнику ICMP echo reply. Это звучит как ответ вида “да, бро, я жив, спасибо!"
3. Время с момента отправки вопроса до получения ответа суммируется и считается за время пинга


КАНАЛЬНЫЙ
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Разрешение адресов

	ARP - Протокол разрешения адресов (ARP) Обеспечивает динамическое сопоставление между IP-адресами и аппаратными адресами

Протокол канального уровня

	Ethernet определяет правила для стандартов прокладки кабелей и обмена сигналами на уровне доступа к сети.
	
	crc-32 Циклический избыточный код (CRC) — это алгоритм нахождения контрольной суммы, предназначенный для проверки целостности данных
	
