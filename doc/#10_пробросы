Проброс портов на МГТС

проброс нс усов АНдрея кудрявцева

не, в обратную сторону же 
ssh mk.rtk134234dfsomm.m9.ms -L 127.0.0.1:8888:192.168.16.69:80

ssh -p 9249 user@127.0.0.1 -L :9888:127.0.0.1:8888 -N -f


ssh mk.rtk134234dfsomm.m9.ms -L 127.0.0.1:10888:192.168.16.69:8000

ssh -p 9249 user@127.0.0.1 -L :8000:127.0.0.1:10888 -N -f


рабочая схема проброса на мгтс
полный путь
ssh user@192.168.16.249 -t ssh ms-907-ms -t ssh user@192.168.16.95
1. заходим на 1 промежуточный ssh user@192.168.16.249
и выполняем открытие портов до 16.95 след команда (порт 9995 может быть свободным произвольным)
ssh ms-907-ms -L 127.0.0.1:9995:192.168.16.95:22 -N -f
2. на своем пк сделать проброс на порт 9995, где порт 8095 порт доступа с своего пк на конечный ус (порт 8095 может быть свободным произвольным)
ssh -p22 user@192.168.16.249 -L :8095:127.0.0.1:9995 -N -f
3. ssh -p 8095 user@127.0.0.1 -R:13304:192.168.66.245:22 -R:3128:192.168.66.253:3128 -N -f;
4. далее попадаем на конечный ус
ssh -p 8095 user@127.0.0.1

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
проброс для айло
ssh root@91.102.155.155 -p3599 -t ssh root@192.168.100.10 -t ssh Administrator@10.232.103.101


ssh -p3599 root@91.102.155.155 -L :9010:192.168.100.10:22 -N -f
ssh -p9010 root@91.102.155.155 -L :9101:172.52.23.101:22 -N -f

ip=172.52.23.101;sudo ssh -p3591 root@91.102.155.155 -L:443:$ip:443 -L:5900:$ip:5900 -L:623:$ip:623 -L:80:$ip:80 -N -f


https://192.168.66.99/ 

sudo kill `ps aux|grep 5900|grep -v grep|awk '{print $2}'


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
проброс до нс

ssh root@91.102.155.155 -p3599 -t ssh root@192.168.100.10 -t ssh user@10.232.103.131 ssh user@192.168.16.222


ssh -p3599 root@91.102.155.155 -L :9111:192.168.100.10:22 -N -f
ssh -p9111 root@127.0.0.1 -L :9112:10.232.103.131:22 -N -f
ssh -p9112 user@127.0.0.1 -L :9113:192.168.16.222:80 -N -f 


эта ссылка работает со старой прошивкой нс 
http://127.0.0.1:9014/nan/index.php,
а эта с новой 
http://127.0.0.1:9113/#/login


ssh user@192.168.66.242 -p31714 -R:13304:192.168.66.245:22 -R:3128:192.168.66.253:3128 -N -f;

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
как вкачать в сервер git
ssh user@192.168.16.27 -R3130:192.168.66.253:3128 -R:13304:192.168.66.245:22 -N -f

так не работает 
git clone mikdorof@127.0.0.1:13304/GIT/modules/ntshmdb
так работает 
git clone ssh://mikdorof@127.0.0.1:13304/GIT/modules/ntshmdb

-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=




привет. при подключении на mos.rtkomm.m9.ms на нем появляется 127.0.0.1:3128, это прокси. надо в этом подключении проброситься самому на себя с туннелем на серый адрес МС
http_proxy='http://192.168.16.160:3128';https_proxy='http://192.168.16.160:3128'

и потом использовать sudo -E


можно мне доступ прямо к нс дать прямо с пробросом, время разобраться сейчас нет ( замена карты и обновление нс еще параллельно идет 

пряме не получится, доступы же позакрывали все :(
 тебе оттуда ssh до 66.245 нужен чтоли?


ssh msk.rtkomm.m9.ms -R 192.168.16.160:22022:192.168.66.245:22

и с нс коннектись на 192.168.16.160 -p 22022
Конечная цель этой команды - установить SSH-соединение с удаленным сервером и перенаправить порт на локальный компьютер. 

Давайте разберем аргументы команды:

- ssh - это команда для установки SSH-соединения с удаленным сервером.
- msk.rtkomm.m9.ms - это IP-адрес удаленного сервера, к которому вы хотите подключиться.
- -R - это опция, которая указывает на перенаправление порта.
- 192.168.160.160:22022:192.168.66.245:22 - это аргумент, который описывает, какой порт на удаленном сервере нужно перенаправить на локальный компьютер. 

Давайте разберемся, что означает аргумент 192.168.16.160:22022:192.168.66.245:22:

- 192.168.16.160 - это IP-адрес, на который будет перенаправлен трафик с удаленного сервера.
- 22022 - это порт, который будет перенаправлен на локальный компьютер.
- 192.168.66.245 - это IP-адрес, на который будет перенаправлен трафик с локального компьютера.
- 22 - это порт, на который будет перенаправлен трафик с локального компьютера.

Таким образом, когда вы подключаетесь к порту 22022 на удаленном сервере, трафик будет перенаправлен на порт 22 на локальном компьютере через адрес 192.168.16.160

Это может быть полезно, если вы хотите получить доступ к удаленному серверу через NAT-шлюз или брандмауэр, который блокирует прямой доступ к порту 22.



не, в обратную сторону же ssh msk.rtkomm.m9.ms -L 127.0.0.1:8888:192.168.16.69:80

и в своей консоли подключения к 16.249 добавить проброс 80 на 127.0.0.1:8888

подключаться 127.0.0.1:80

Для создания обратного проброса портов в Ubuntu можно использовать утилиту ssh. Для этого нужно выполнить следующую команду в терминале:

ssh -R <remote_port>:localhost:<local_port> <remote_user>@<remote_host>


Где:
- <remote_port> - порт на удаленном хосте, который будет проброшен на локальный порт <local_port>
- <local_port> - локальный порт, который будет проброшен на удаленный порт <remote_port>
- <remote_user> - имя пользователя на удаленном хосте
- <remote_host> - адрес удаленного хоста

Например, если нужно пробросить порт 8080 на локальной машине на порт 80 на удаленном хосте с IP-адресом 192.168.1.100, то команда будет выглядеть так:

ssh -R 80:localhost:8080 user@192.168.1.100


После выполнения этой команды порт 8080 на локальной машине будет доступен на порту 80 на удаленном хосте.


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Ключи SSH - это способ аутентификации при подключении к удаленному серверу по протоколу SSH. Некоторые из популярных ключей SSH включают в себя:

1. -i - указывает путь к файлу с ключом SSH
2. -p - указывает порт, который будет использоваться для подключения к удаленному серверу
3. -A - включает агент аутентификации SSH, который позволяет использовать ключи SSH без необходимости вводить пароль каждый раз при подключении к удаленному серверу
4. -L - создает локальный проброс портов
5. -R - создает обратный проброс портов
6. -X - включает проброс графического интерфейса X11
7. -C - включает сжатие данных для ускорения передачи данных по сети
8. -v - включает подробный вывод для отладки проблем при подключении к удаленному серверу
9. -q - отключает вывод сообщений о подключении к удаленному серверу
10. -N в команде ssh указывает, что не нужно запускать удаленную команду после подключения к серверу
11. -f в команде ssh указывает, что нужно запустить SSH-соединение в фоновом режиме
12. -t в команде ssh указывает, что нужно выделить псевдотерминал на удаленном сервере


Ключ -N в команде ssh указывает, что не нужно запускать удаленную команду после подключения к серверу. Это может быть полезно, если вы хотите только установить SSH-соединение с удаленным сервером, но не хотите выполнять какие-либо команды на этом сервере. Например, если вы хотите создать проброс портов, но не хотите запускать какие-либо команды на удаленном сервере, вы можете использовать ключ -N.

Ключ -f в команде ssh указывает, что нужно запустить SSH-соединение в фоновом режиме. Это может быть полезно, если вы хотите установить SSH-соединение и оставить его открытым, но не хотите, чтобы оно занимало терминал. Например, если вы хотите создать проброс портов и оставить его открытым, вы можете использовать ключ -f.

Ключ -t в команде ssh указывает, что нужно выделить псевдотерминал на удаленном сервере. Это может быть полезно, если вы хотите запустить интерактивную командную оболочку на удаленном сервере или выполнить какую-либо другую интерактивную команду. Например, если вы хотите запустить интерактивную командную оболочку на удаленном сервере, вы можете использовать команду ssh -t user@remote_host bash.
 
 
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= 
 
 
 
 
 как настроить обратный проброс с сервера(мс)на карту 

делаем обратный проброс с компа на сервер 

ssh -p31873 user@192.168.66.242 -R:13304:192.168.66.245:22 -R:3128:192.168.66.253:3128

затем в /etc/hostid смотрим id сервера , с этим id лезим  в user.conf, раздел  claster и ищем там control = { ip = "192.168.160.206"; }
 таким образом мы узнали ip mc 
 затем  мы по ssh заходим на карту 
 ssh 192.168.160.9
 
 и добавляем в export ip адрес mc ((было: export http_proxy=http://127.0.0.1:3128;) (стало:export http_proxy=http://192.168.160.206:3128; ))
export http_proxy=http://192.168.150.50:3128; \
export https_proxy=http://192.168.150.50:3128

для проверки утсановился ли проброс выполним команду sudo -E http_proxy=http://192.168.160.206:3128 apt-get update


Если при открытии -R:3128:192.168.66.253:3128
Всё равно открывается только 127.0.0.1
sudo netstat -napt | grep 312
tcp        0      0 127.0.0.1:3128          0.0.0.0:*               LISTEN      31768/sshd: user@pts 
tcp6       0      0 ::1:3128                :::*
                    LISTEN      31768/sshd: user@pts 
Проверяем в конфиге 
grep GatewayPorts  /etc/ssh/sshd_config
#GatewayPorts no
Во всех случаях кроме 
GatewayPorts clientspecified
Правим конфиг и рестартуем sshd
sudo sed -i 's/\#*GatewayPorts.*/GatewayPorts clientspecified/' /etc/ssh/sshd_config;sudo systemctl restart ssh


потом пересоздать туннель
